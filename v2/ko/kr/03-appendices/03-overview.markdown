\newpage
# 부록 A: 소프트웨어 보안과 위험 원칙 개요 {#소프트웨어-보안과-위험-원칙-개요 .list-paragraph}

안전한 소프트웨어를 개발하려면 보안 원칙에 대한 기본적인 이해가
필요하다. 보안 원칙에 대한 상세한 설명은 본 가이드의 범위를
벗어나므로, 개괄적인 내용만을 제공한다.

소프트웨어 보안의 목표는 성공적으로 사업을 운영하기 위해 정보 자원의
비밀성 *,* 무결성, 그리고
가용성을 유지하는 것이다. 이 목표들은 보안 통제 기능을
구현하면서 달성할 수 있다. 본 가이드는 흔한 소프트웨어의
취약점을 [완화](#_bookmark9)시킬 수 있는
기술적 통제 항목에 중점을 둔다. 1 차적인 초점은 웹 애플리케이션과 웹
애플리케이션을 지원하는 인프라 스트럭처이지만, 가이드라인의 내용
대부분은 모든 소프트웨어 개발 플랫폼에 적용 가능하다.

소프트웨어의 안전성과 관련된 수용할 수 없는 위험으로부터 사업을
보호하려면, 위험의 의미를 이해할 필요가 있다. 위험은 비즈니스의 성공을
위협하는 요소들의 조합이다. 이는 개념적으로 다음과 같이 설명 가능하다:
[위협 요소](#_bookmark14)는 [피해](#_bookmark7)를 주기위해
[악용](#_bookmark4)할 수 있는 취약점을
가진 시스템과 상호작용한다. 이 것은 추상적인 개념
같지만, 다음과 같은 방향으로 생각해보자: 자동차 도둑(위협 요소)이
잠기지 않은 문(취약점)을 찾기 위해 주차장을 따라 자동차(시스템)을
확인하면서 간다. 그리고 도둑이 하나 발견한다면, 자동차 문을 열고(악용)
자동차 안에 무엇이 있든 가져간다(피해). 이러한 모든 요소들이 안전한
소프트웨어 개발에 영향을 준다.

개발팀의 접근방법과 애플리케이션 공격자의 접근방법은 기본적으로
차이점이 있다. 개발팀은 일반적으로 애플리케이션의 정상적인 의도에
초점을 맞춰 접근한다. 즉 문서화된 기능 요구사항과 사용자 사례에
기반하여 특정 기능을 수행하는 애플리케이션을 디자인한다. 이와 달리
공격자는 애플리케이션이 할 수 있는 것과 "구체적으로 거부되지 않은
행위는 허용된다"라는 원칙에 따라 동작하는 것에 더 많은 관심을 가지고
있다. 이 문제를 해결하려면, 소프트웨어 생명주기의 초기 단계에서부터
추가적인 요소가 포함되어야 한다. 추가적으로 필요한 요소란 바로 보안
요구사항과 [오용 사례](#_bookmark0)이다. 본
가이드는 높은 수준의 보안 요구사항을 정의하는 것과 가장 많이 오용하는
시나리오를 해결하는 데 도움이 된다.

웹 개발팀은 조금이라도 보안에 이점을 줄 수 있는 사용자 측의 입력값
검증, 숨겨진 필드와 인터페이스 통제(예: 풀다운 메뉴와 라디오 버튼)와
같은 사용자 측 통제를 이해하는 것이 중요하다. 공격자는 애플리케이션
트래픽을 분석하고 조작된 요청을 전송하거나 모든 인터페이스를 우회하기
위해 사용자 측 웹 프록시(예: OWASP WebScarab, Burp) 또는 네트워크 패킷
캡처 도구(예: WireShark)와 같은 도구를 사용할 수 있다. 추가적으로
플래쉬, 자바 애플릿, 그리고 다른 사용자 측 오브젝트는 취약점을 찾기
위해 디컴파일되고 분석될 수 있다.

소프트웨어 보안 취약점은 다음을 포함하는 소프트웨어 개발 생명주기의
어떤 단계에서도 발견될 수 있다:

-   이전 보안 요구사항에 정의되지 않았을 때
-   논리적 에러를 가지고 있도록 개념적으로 설계했을 때
-   기술 취약점이 노출된 취약한 코딩 규칙을 사용했을 때
-   소프트웨어를 부적절하게 배치했을 때
-   관리 또는 업데이트 중 취약점이 발표될 때

더욱이, 소프트웨어 취약점은 소프트웨어 자체를 넘어서서 그 이상의
피해를 초래한다는 사실을 알아야 한다. 소프트웨어 및 취약점, 관련
인프라스트럭처의 성격에 따라서, 취약점 공격이 성공했을 때의 다음 중
하나 또는 모든 항목에 대해서 영향을 줄 수 있다:

-   소프트웨어 및 관련된 정보
-   관련 서버의 운영체제
-   데이터베이스
-   공유 환경에 있는 다른 애플리케이션
-   사용자 시스템
-   사용자와 상호작용하는 다른 소프트웨어
