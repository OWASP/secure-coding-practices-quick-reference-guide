\newpage
# 소개

본 기술 문서는 소프트웨어 개발 생명주기의 한 부분으로 통합하여 사용할
수 있는 일반적인 소프트웨어 시큐어 코딩 규칙을 체크리스트 형태로
정의하고 있다. 이 규칙을 적용한다면 가장 일반적인 소프트웨어 취약점을
완화시킬 수 있다.

보안 사고와 관련된 비용을 따지지 않더라도, 소프트웨어 패키지가 완성된
후 보안 문제를 수정하는 것보다 안전한 소프트웨어를 개발하는 것이
비용이 적게 든다.

공격자의 초점이 애플리케이션 계층으로 지속적으로 이동함에 따라 주요
소프트웨어 자원 보호는 그 이전보다 중요해졌다. 2009 년 SANS 연구결과 1
에 따르면 애플리케이션 계층에 대한 공격이 인터넷에서 발견되는 전체
공격 시도의 60% 이상을 차지하고 있다.

본 가이드를 활용할 때, 개발팀은 보유한 소프트웨어 개발 생명주기와
팀원의 지식 수준의 성숙도에 대한 평가부터 시작해야 한다. 본 가이드는
개별 코딩 규칙을 구현하는 상세한 내용이 없으므로, 사전 지식이나 필요한
조언을 얻을 수 있는 충분한 자원(조언자)이 개발자에게 필요하다. 본
가이드는 보안 취약점과 공격코드에 대해 깊게 알고 있는 개발자가 없어도
코딩 요구사항으로 사용할 수 있는 코딩 규칙을 제공한다. 하지만,
개발팀은 전체 시스템의 설계와 구현 안전성을 검증할 수 있는 책임감과
충분한 교육, 도구 그리고 자원을 가져야 한다.

이탤릭으로 표기한 본 문서, 장별 제목, 그리고 문장의 중요 단어 목록은
부록 B 에서 제공한다.

안전한 소프트웨어 개발 프레임워크 구현 가이드라인은 본 문서의 범위에
포함되지 않는다. 하지만, 추가적으로 필요한 일반적인 사례 문서와 참고
문헌은 다음과 같다:

-   역할과 책임을 명화하게 정의

-   개발팀에게 충분한 소프트웨어 보안 교육을 제공

-   안전한 소프트웨어 개발 생명주기 준수

-   시큐어 코딩 표준 확립

    -   [OWASP Development Guide][guide] Project

-   재사용 가능한 객체 라이브러리 제작

    -   [OWASP Enterprise Security API][esapi] (ESAPI) Project

-   보안 통제의 효과성 점검

    -   [OWASP Application Security Verification Standard][asvs] (ASVS) Project

-   RFP(the Request for Proposal)와 계약서에 보안 요구사항과 검증
    방법론을 정의한 보안 아웃소싱 개발 규칙을 확립

[asvs]: https://owasp.org/www-project-application-security-verification-standard/
[esapi]: https://owasp.org/www-project-enterprise-security-api/
[guide]: http://www.owasp.org/index.php/Category:OWASP_Guide_Project
